{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCHCC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHtBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAY,SACZa,KAAK,SACLF,YAAcA,EACdG,SAAYF,MC0CLG,G,wDA5Cb,aAAe,IAAD,8BACZ,gBAoBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAnBrC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDAad,WAAsB,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAASkB,OACvCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sC,oBAQ9B,WAAS,MAG2BC,KAAKV,MAA/Bb,EAHD,EAGCA,SAAUU,EAHX,EAGWA,YACZc,EAAoBxB,EAASyB,QAAO,SAAA9B,GAAO,OAC/CA,EAAQE,KAAK6B,cAAcC,SAASjB,EAAYgB,kBAClD,OACE,sBAAKlC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAemB,KAAKnB,eAEtB,cAAC,EAAD,CAAUJ,SAAUwB,W,GAxCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fc97d344.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css'\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2> {props.monster.name} </h2>\n            <p> {props.monster.email} </p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n                <Card key={monster.id} monster={monster} />\n            ))\n        }\n    </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n// This is a functional component \nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input  \n        className = 'search'\n        type='search' \n        placeholder={ placeholder } \n        onChange= { handleChange } />\n        ); ","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    // make sure the context of this is correct | USE ARROW FUNCTIONS\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // When a component method renders do this function.\n  componentDidMount()  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters:users}))\n    .catch(error => console.log(\"API endpoint was unreachable.\"))\n  }\n\n  // arrow functions give a lexical scoping...\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n\n  render() {\n    // const monsters = this.state.monsters;\n    // const searchField = this.state.searchField;\n    const { monsters, searchField } = this.state;\n    const filteredMonsters  = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange ={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}